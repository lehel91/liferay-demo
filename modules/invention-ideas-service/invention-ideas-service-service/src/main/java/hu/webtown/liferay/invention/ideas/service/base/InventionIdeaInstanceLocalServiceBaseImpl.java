/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package hu.webtown.liferay.invention.ideas.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.exportimport.kernel.lar.ExportImportHelperUtil;
import com.liferay.exportimport.kernel.lar.ManifestSummary;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import hu.webtown.liferay.invention.ideas.model.InventionIdeaInstance;
import hu.webtown.liferay.invention.ideas.service.InventionIdeaInstanceLocalService;
import hu.webtown.liferay.invention.ideas.service.persistence.InventionIdeaInstancePersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the invention idea instance local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link hu.webtown.liferay.invention.ideas.service.impl.InventionIdeaInstanceLocalServiceImpl}.
 * </p>
 *
 * @author lehel
 * @see hu.webtown.liferay.invention.ideas.service.impl.InventionIdeaInstanceLocalServiceImpl
 * @see hu.webtown.liferay.invention.ideas.service.InventionIdeaInstanceLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class InventionIdeaInstanceLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements InventionIdeaInstanceLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link hu.webtown.liferay.invention.ideas.service.InventionIdeaInstanceLocalServiceUtil} to access the invention idea instance local service.
	 */

	/**
	 * Adds the invention idea instance to the database. Also notifies the appropriate model listeners.
	 *
	 * @param inventionIdeaInstance the invention idea instance
	 * @return the invention idea instance that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public InventionIdeaInstance addInventionIdeaInstance(
		InventionIdeaInstance inventionIdeaInstance) {
		inventionIdeaInstance.setNew(true);

		return inventionIdeaInstancePersistence.update(inventionIdeaInstance);
	}

	/**
	 * Creates a new invention idea instance with the primary key. Does not add the invention idea instance to the database.
	 *
	 * @param id the primary key for the new invention idea instance
	 * @return the new invention idea instance
	 */
	@Override
	@Transactional(enabled = false)
	public InventionIdeaInstance createInventionIdeaInstance(long id) {
		return inventionIdeaInstancePersistence.create(id);
	}

	/**
	 * Deletes the invention idea instance with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param id the primary key of the invention idea instance
	 * @return the invention idea instance that was removed
	 * @throws PortalException if a invention idea instance with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public InventionIdeaInstance deleteInventionIdeaInstance(long id)
		throws PortalException {
		return inventionIdeaInstancePersistence.remove(id);
	}

	/**
	 * Deletes the invention idea instance from the database. Also notifies the appropriate model listeners.
	 *
	 * @param inventionIdeaInstance the invention idea instance
	 * @return the invention idea instance that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public InventionIdeaInstance deleteInventionIdeaInstance(
		InventionIdeaInstance inventionIdeaInstance) {
		return inventionIdeaInstancePersistence.remove(inventionIdeaInstance);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(InventionIdeaInstance.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return inventionIdeaInstancePersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link hu.webtown.liferay.invention.ideas.model.impl.InventionIdeaInstanceModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return inventionIdeaInstancePersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link hu.webtown.liferay.invention.ideas.model.impl.InventionIdeaInstanceModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return inventionIdeaInstancePersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return inventionIdeaInstancePersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return inventionIdeaInstancePersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public InventionIdeaInstance fetchInventionIdeaInstance(long id) {
		return inventionIdeaInstancePersistence.fetchByPrimaryKey(id);
	}

	/**
	 * Returns the invention idea instance matching the UUID and group.
	 *
	 * @param uuid the invention idea instance's UUID
	 * @param groupId the primary key of the group
	 * @return the matching invention idea instance, or <code>null</code> if a matching invention idea instance could not be found
	 */
	@Override
	public InventionIdeaInstance fetchInventionIdeaInstanceByUuidAndGroupId(
		String uuid, long groupId) {
		return inventionIdeaInstancePersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the invention idea instance with the primary key.
	 *
	 * @param id the primary key of the invention idea instance
	 * @return the invention idea instance
	 * @throws PortalException if a invention idea instance with the primary key could not be found
	 */
	@Override
	public InventionIdeaInstance getInventionIdeaInstance(long id)
		throws PortalException {
		return inventionIdeaInstancePersistence.findByPrimaryKey(id);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(inventionIdeaInstanceLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(InventionIdeaInstance.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(inventionIdeaInstanceLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(InventionIdeaInstance.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("id");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(inventionIdeaInstanceLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(InventionIdeaInstance.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id");
	}

	@Override
	public ExportActionableDynamicQuery getExportActionableDynamicQuery(
		final PortletDataContext portletDataContext) {
		final ExportActionableDynamicQuery exportActionableDynamicQuery = new ExportActionableDynamicQuery() {
				@Override
				public long performCount() throws PortalException {
					ManifestSummary manifestSummary = portletDataContext.getManifestSummary();

					StagedModelType stagedModelType = getStagedModelType();

					long modelAdditionCount = super.performCount();

					manifestSummary.addModelAdditionCount(stagedModelType,
						modelAdditionCount);

					long modelDeletionCount = ExportImportHelperUtil.getModelDeletionCount(portletDataContext,
							stagedModelType);

					manifestSummary.addModelDeletionCount(stagedModelType,
						modelDeletionCount);

					return modelAdditionCount;
				}
			};

		initActionableDynamicQuery(exportActionableDynamicQuery);

		exportActionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod() {
				@Override
				public void addCriteria(DynamicQuery dynamicQuery) {
					portletDataContext.addDateRangeCriteria(dynamicQuery,
						"modifiedDate");
				}
			});

		exportActionableDynamicQuery.setCompanyId(portletDataContext.getCompanyId());

		exportActionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod<InventionIdeaInstance>() {
				@Override
				public void performAction(
					InventionIdeaInstance inventionIdeaInstance)
					throws PortalException {
					StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,
						inventionIdeaInstance);
				}
			});
		exportActionableDynamicQuery.setStagedModelType(new StagedModelType(
				PortalUtil.getClassNameId(InventionIdeaInstance.class.getName())));

		return exportActionableDynamicQuery;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return inventionIdeaInstanceLocalService.deleteInventionIdeaInstance((InventionIdeaInstance)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return inventionIdeaInstancePersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns all the invention idea instances matching the UUID and company.
	 *
	 * @param uuid the UUID of the invention idea instances
	 * @param companyId the primary key of the company
	 * @return the matching invention idea instances, or an empty list if no matches were found
	 */
	@Override
	public List<InventionIdeaInstance> getInventionIdeaInstancesByUuidAndCompanyId(
		String uuid, long companyId) {
		return inventionIdeaInstancePersistence.findByUuid_C(uuid, companyId);
	}

	/**
	 * Returns a range of invention idea instances matching the UUID and company.
	 *
	 * @param uuid the UUID of the invention idea instances
	 * @param companyId the primary key of the company
	 * @param start the lower bound of the range of invention idea instances
	 * @param end the upper bound of the range of invention idea instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the range of matching invention idea instances, or an empty list if no matches were found
	 */
	@Override
	public List<InventionIdeaInstance> getInventionIdeaInstancesByUuidAndCompanyId(
		String uuid, long companyId, int start, int end,
		OrderByComparator<InventionIdeaInstance> orderByComparator) {
		return inventionIdeaInstancePersistence.findByUuid_C(uuid, companyId,
			start, end, orderByComparator);
	}

	/**
	 * Returns the invention idea instance matching the UUID and group.
	 *
	 * @param uuid the invention idea instance's UUID
	 * @param groupId the primary key of the group
	 * @return the matching invention idea instance
	 * @throws PortalException if a matching invention idea instance could not be found
	 */
	@Override
	public InventionIdeaInstance getInventionIdeaInstanceByUuidAndGroupId(
		String uuid, long groupId) throws PortalException {
		return inventionIdeaInstancePersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the invention idea instances.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link hu.webtown.liferay.invention.ideas.model.impl.InventionIdeaInstanceModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of invention idea instances
	 * @param end the upper bound of the range of invention idea instances (not inclusive)
	 * @return the range of invention idea instances
	 */
	@Override
	public List<InventionIdeaInstance> getInventionIdeaInstances(int start,
		int end) {
		return inventionIdeaInstancePersistence.findAll(start, end);
	}

	/**
	 * Returns the number of invention idea instances.
	 *
	 * @return the number of invention idea instances
	 */
	@Override
	public int getInventionIdeaInstancesCount() {
		return inventionIdeaInstancePersistence.countAll();
	}

	/**
	 * Updates the invention idea instance in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param inventionIdeaInstance the invention idea instance
	 * @return the invention idea instance that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public InventionIdeaInstance updateInventionIdeaInstance(
		InventionIdeaInstance inventionIdeaInstance) {
		return inventionIdeaInstancePersistence.update(inventionIdeaInstance);
	}

	/**
	 * Returns the invention idea instance local service.
	 *
	 * @return the invention idea instance local service
	 */
	public InventionIdeaInstanceLocalService getInventionIdeaInstanceLocalService() {
		return inventionIdeaInstanceLocalService;
	}

	/**
	 * Sets the invention idea instance local service.
	 *
	 * @param inventionIdeaInstanceLocalService the invention idea instance local service
	 */
	public void setInventionIdeaInstanceLocalService(
		InventionIdeaInstanceLocalService inventionIdeaInstanceLocalService) {
		this.inventionIdeaInstanceLocalService = inventionIdeaInstanceLocalService;
	}

	/**
	 * Returns the invention idea instance persistence.
	 *
	 * @return the invention idea instance persistence
	 */
	public InventionIdeaInstancePersistence getInventionIdeaInstancePersistence() {
		return inventionIdeaInstancePersistence;
	}

	/**
	 * Sets the invention idea instance persistence.
	 *
	 * @param inventionIdeaInstancePersistence the invention idea instance persistence
	 */
	public void setInventionIdeaInstancePersistence(
		InventionIdeaInstancePersistence inventionIdeaInstancePersistence) {
		this.inventionIdeaInstancePersistence = inventionIdeaInstancePersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("hu.webtown.liferay.invention.ideas.model.InventionIdeaInstance",
			inventionIdeaInstanceLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"hu.webtown.liferay.invention.ideas.model.InventionIdeaInstance");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return InventionIdeaInstanceLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return InventionIdeaInstance.class;
	}

	protected String getModelClassName() {
		return InventionIdeaInstance.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = inventionIdeaInstancePersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = InventionIdeaInstanceLocalService.class)
	protected InventionIdeaInstanceLocalService inventionIdeaInstanceLocalService;
	@BeanReference(type = InventionIdeaInstancePersistence.class)
	protected InventionIdeaInstancePersistence inventionIdeaInstancePersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}